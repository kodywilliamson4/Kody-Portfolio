// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace G01ElectronicVoting.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using G01ElectronicVoting.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using G01ElectronicVoting.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using System.Diagnostics;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\_Imports.razor"
using Google.Cloud.Firestore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\Pages\ElectionMgmt.razor"
using G01ElectronicVoting.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\Pages\ElectionMgmt.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\Pages\ElectionMgmt.razor"
using Microsoft.VisualBasic.FileIO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\Pages\ElectionMgmt.razor"
using System.Net;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\Pages\ElectionMgmt.razor"
using System.Net.Mail;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\Pages\ElectionMgmt.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/electionmgmt")]
    public partial class ElectionMgmt : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 109 "C:\Users\kodyw\csse4770_sp2021_g01\G01ElectronicVoting\Client\Pages\ElectionMgmt.razor"
       
    public class CandidateListValidator : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var candidateListString = (string)value;
            string[] candidateList = candidateListString.Split(';');

            return ((candidateList.Length > 1) ? ValidationResult.Success : new ValidationResult("Election must have more than one candidate"));
        }
    }

    public class ElectorateCSVFileAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var electorateFile = (IBrowserFile)value;

            if (Path.GetExtension(electorateFile.Name) != ".csv")
                return new ValidationResult("Electorate file must be a csv");

            return ValidationResult.Success;
        }
    }

    public class ElectionMgmtFormModel
    {
        [Required(ErrorMessage = "Election needs a title")]
        [StringLength(128, ErrorMessage = "Election title is too long")]
        public string Title { get; set; } = null;

        [Required(ErrorMessage = "Election must have candidates")]
        [CandidateListValidator()]
        public string Candidates { get; set; } = null;

        [Required(ErrorMessage = "Electorate file must be present")]
        [ElectorateCSVFileAttribute()]
        public IBrowserFile Electorate { get; set; }

        [Required(ErrorMessage = "Election must have a start date/time")]
        public DateTime StartDate { get; set; } = DateTime.Today.AddDays(1);

        [Required(ErrorMessage = "Election must have a end date/time")]
        public DateTime EndDate { get; set; } = DateTime.Today.AddDays(8);

        public bool SendEmail { get; set; } = false;
    }

    private ElectionMgmtFormModel model = new ElectionMgmtFormModel();
    private List<string> candidateList = new();
    private List<string> electorate = new();
    private AuthenticationState authState;
    private List<Election> yourElections = new();
    private bool LoadingElections { get; set; } = false;
    private string CreateElectionStatus { get; set; } = "";

    //private EmailAccess emailAccess = new EmailAccess();

    private void ElectorateFileChange(InputFileChangeEventArgs e) => model.Electorate = e.File;

    protected override async Task OnInitializedAsync()
    {
        authState = await authStateProvider.GetAuthenticationStateAsync();

        await LoadUserElections();
    }

    private async Task LoadUserElections()
    {
        LoadingElections = true;
        yourElections = await http.GetFromJsonAsync<List<Election>>($"api/ElectionMgmt/{authState.User.Identity.Name}");
        LoadingElections = false;
    }

    private async Task OpenExampleInNewTab()
    {
        string url = "img/exampleElectorate.png";
        await js.InvokeAsync<object>("open", url, "_blank");
    }

    private async Task HandleValidSubmit()
    {
        CreateElectionStatus = "";
        LoadingElections = true;

        candidateList = model.Candidates.Split(';').Select(x => x.Trim()).Where(x => x != "").ToList<string>();

        using (var ms = new MemoryStream())
        {
            await model.Electorate.OpenReadStream().CopyToAsync(ms);
            ms.Seek(0, SeekOrigin.Begin);

            using (TextFieldParser parser = new TextFieldParser(ms))
            {
                parser.TextFieldType = FieldType.Delimited;
                parser.SetDelimiters(",");

                string[] colname = parser.ReadFields();
                if (colname[0] != "Email" && colname[0] != "email")
                {
                    CreateElectionStatus = "Electorate CSV must have first column \"Email\" (see example)";
                    LoadingElections = false;
                    return;
                }

                while (!parser.EndOfData)
                {
                    string[] fields = parser.ReadFields();
                    if (fields[0].Trim() != "") electorate.Add(fields[0]);
                }
            }
        }

        Election e = new Election(model.Title, candidateList, model.StartDate.Year, model.StartDate.Month, model.StartDate.Day, model.EndDate.Year, model.EndDate.Month, model.EndDate.Day, authState.User.Identity.Name, electorate, false);
        await http.PostAsJsonAsync("api/Election", e);

        LoadingElections = false;
        CreateElectionStatus = $"Success! Created \"{model.Title}\"";

        //bool requestSent = false;
        if(model.SendEmail == true)
        {
            
            string temp = e.Title;
            string temp2 = e.Creator;
            
            foreach (var voters in electorate)
            {
                bool send = await http.GetFromJsonAsync<bool>($"api/Email/{voters}/{temp}/{temp2}");          
            }
            
           
        }
       
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider authStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591
