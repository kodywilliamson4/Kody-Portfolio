@page "/electionmgmt"

@using G01ElectronicVoting.Shared;
 
@using System.IO;
@using Microsoft.VisualBasic.FileIO;
@using System.Net;
@using System.Net.Mail;
@using System.Net.Http; 

@inject HttpClient http
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime js

<AuthorizeView Context="auth">
    <Authorized>
        <h3><b>Your Elections</b></h3>

        <button class="btn btn-info" @onclick="LoadUserElections" disabled="@LoadingElections">
            Refresh
            @if (LoadingElections) { <div class="spinner-border spinner-border-sm" /> }
        </button>
        

        @if (yourElections.Count <= 0)
        {
            <p><i>You have no elections</i></p>
        }
        else
        {
            <div class="accordion">
                @foreach (var i in yourElections)
                {
                    if (!i.Hidden)
                    {
                        <CreatedElectionCard ThisElection=i RefreshElections="LoadUserElections" />
                    }
                }
            </div>

            <br />
        }

        <h3 style="margin-bottom:20px"><b>Create an Election</b></h3>

        <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group">
                <div style="width:50%">
                    <label for="title"><b>Election title</b></label>
                    <InputText id="title" class="form-control" @bind-Value="model.Title" />
                </div>
            </div>

            <div class="form-group">
                <div style="width:50%">
                    <label for="candidates"><b>Candidates</b> (separate with a semicolon <code>;</code>)</label>
                    <InputText id="candidates" class="form-control" @bind-Value="model.Candidates" />
                </div>
            </div>

            <div class="form-group">
                <label for="electorate"><b>Electorate</b> (csv)</label>
                <InputFile id="electorate" OnChange="ElectorateFileChange" />
                <ValidationMessage For="() => model.Electorate" />
                <br />
                <p><i>Note: First column must be named Email (<button type="button" class="btn btn-link" style="font-size: 1em; padding:0" @onclick="OpenExampleInNewTab"><i>Example</i></button>)</i></p>
            </div>

            <div class="form-group">
                <div class="form-row">
                    <div class="col-auto">
                        <label for="start-date"><b>Start date</b></label>
                        <InputDate id="start-date" class="form-control" @bind-Value="model.StartDate" />
                    </div>
                    <div class="col-auto">
                        <label for="end-date"><b>End date</b></label>
                        <InputDate id="end-date" class="form-control" @bind-Value="model.EndDate" />
                    </div>
                </div>
            </div>

            <ValidationSummary />

            <div class="form-group">
                <InputCheckbox id="email-electorate" @bind-Value="model.SendEmail" />
                <label for="email-electorate"> Notify electorate by email</label>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-info" disabled="@LoadingElections">
                    Create election
                    @if (LoadingElections)
                    {
                        <div class="spinner-border spinner-border-sm" />
                    }
                </button>
                <span><i>@CreateElectionStatus</i></span>
            </div>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>


@code {
    public class CandidateListValidator : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var candidateListString = (string)value;
            string[] candidateList = candidateListString.Split(';');

            return ((candidateList.Length > 1) ? ValidationResult.Success : new ValidationResult("Election must have more than one candidate"));
        }
    }

    public class ElectorateCSVFileAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var electorateFile = (IBrowserFile)value;

            if (Path.GetExtension(electorateFile.Name) != ".csv")
                return new ValidationResult("Electorate file must be a csv");

            return ValidationResult.Success;
        }
    }

    public class ElectionMgmtFormModel
    {
        [Required(ErrorMessage = "Election needs a title")]
        [StringLength(128, ErrorMessage = "Election title is too long")]
        public string Title { get; set; } = null;

        [Required(ErrorMessage = "Election must have candidates")]
        [CandidateListValidator()]
        public string Candidates { get; set; } = null;

        [Required(ErrorMessage = "Electorate file must be present")]
        [ElectorateCSVFileAttribute()]
        public IBrowserFile Electorate { get; set; }

        [Required(ErrorMessage = "Election must have a start date/time")]
        public DateTime StartDate { get; set; } = DateTime.Today.AddDays(1);

        [Required(ErrorMessage = "Election must have a end date/time")]
        public DateTime EndDate { get; set; } = DateTime.Today.AddDays(8);

        public bool SendEmail { get; set; } = false;
    }

    private ElectionMgmtFormModel model = new ElectionMgmtFormModel();
    private List<string> candidateList = new();
    private List<string> electorate = new();
    private AuthenticationState authState;
    private List<Election> yourElections = new();
    private bool LoadingElections { get; set; } = false;
    private string CreateElectionStatus { get; set; } = "";

    //private EmailAccess emailAccess = new EmailAccess();

    private void ElectorateFileChange(InputFileChangeEventArgs e) => model.Electorate = e.File;

    protected override async Task OnInitializedAsync()
    {
        authState = await authStateProvider.GetAuthenticationStateAsync();

        await LoadUserElections();
    }

    private async Task LoadUserElections()
    {
        LoadingElections = true;
        yourElections = await http.GetFromJsonAsync<List<Election>>($"api/ElectionMgmt/{authState.User.Identity.Name}");
        LoadingElections = false;
    }

    private async Task OpenExampleInNewTab()
    {
        string url = "img/exampleElectorate.png";
        await js.InvokeAsync<object>("open", url, "_blank");
    }

    private async Task HandleValidSubmit()
    {
        CreateElectionStatus = "";
        LoadingElections = true;

        candidateList = model.Candidates.Split(';').Select(x => x.Trim()).Where(x => x != "").ToList<string>();

        using (var ms = new MemoryStream())
        {
            await model.Electorate.OpenReadStream().CopyToAsync(ms);
            ms.Seek(0, SeekOrigin.Begin);

            using (TextFieldParser parser = new TextFieldParser(ms))
            {
                parser.TextFieldType = FieldType.Delimited;
                parser.SetDelimiters(",");

                string[] colname = parser.ReadFields();
                if (colname[0] != "Email" && colname[0] != "email")
                {
                    CreateElectionStatus = "Electorate CSV must have first column \"Email\" (see example)";
                    LoadingElections = false;
                    return;
                }

                while (!parser.EndOfData)
                {
                    string[] fields = parser.ReadFields();
                    if (fields[0].Trim() != "") electorate.Add(fields[0]);
                }
            }
        }

        Election e = new Election(model.Title, candidateList, model.StartDate.Year, model.StartDate.Month, model.StartDate.Day, model.EndDate.Year, model.EndDate.Month, model.EndDate.Day, authState.User.Identity.Name, electorate, false);
        await http.PostAsJsonAsync("api/Election", e);

        LoadingElections = false;
        CreateElectionStatus = $"Success! Created \"{model.Title}\"";

        //bool requestSent = false;
        if(model.SendEmail == true)
        {
            
            string temp = e.Title;
            string temp2 = e.Creator;
            
            foreach (var voters in electorate)
            {
                bool send = await http.GetFromJsonAsync<bool>($"api/Email/{voters}/{temp}/{temp2}");          
            }
            
           
        }
       
    }
}
